// Code generated by sqlc. DO NOT EDIT.
// source: crud.sql

package query

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo (todo_name, todo_list_name, content, done)
VALUES ($1, $2, $3, $4) RETURNING id, todo_name, todo_list_name, created_at, updated_at, content, done
`

type CreateTodoParams struct {
	TodoName     sql.NullString `json:"todo_name"`
	TodoListName sql.NullString `json:"todo_list_name"`
	Content      string         `json:"content"`
	Done         bool           `json:"done"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.TodoName,
		arg.TodoListName,
		arg.Content,
		arg.Done,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.TodoName,
		&i.TodoListName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Content,
		&i.Done,
	)
	return i, err
}

const createTodoList = `-- name: CreateTodoList :one
INSERT INTO todo_list (todo_list_name)
VALUES($1) RETURNING id, todo_list_name, created_at, updated_at
`

func (q *Queries) CreateTodoList(ctx context.Context, todoListName sql.NullString) (TodoList, error) {
	row := q.db.QueryRowContext(ctx, createTodoList, todoListName)
	var i TodoList
	err := row.Scan(
		&i.ID,
		&i.TodoListName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodoById = `-- name: DeleteTodoById :exec
DELETE FROM todo
WHERE id = $1
`

func (q *Queries) DeleteTodoById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodoById, id)
	return err
}

const deleteTodoListById = `-- name: DeleteTodoListById :exec
DELETE FROM todo_list
WHERE id = $1
`

func (q *Queries) DeleteTodoListById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodoListById, id)
	return err
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, todo_name, todo_list_name, created_at, updated_at, content, done FROM todo
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.TodoName,
			&i.TodoListName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Content,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, todo_name, todo_list_name, created_at, updated_at, content, done FROM todo
WHERE id = $1
`

func (q *Queries) GetTodoById(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.TodoName,
		&i.TodoListName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Content,
		&i.Done,
	)
	return i, err
}

const getTodoLists = `-- name: GetTodoLists :many
SELECT id, todo_list_name, created_at, updated_at FROM todo_list
`

func (q *Queries) GetTodoLists(ctx context.Context) ([]TodoList, error) {
	rows, err := q.db.QueryContext(ctx, getTodoLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoList
	for rows.Next() {
		var i TodoList
		if err := rows.Scan(
			&i.ID,
			&i.TodoListName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodosFromList = `-- name: GetTodosFromList :many
SELECT id, todo_name, todo_list_name, created_at, updated_at, content, done FROM todo
WHERE todo_list_name = $1
`

func (q *Queries) GetTodosFromList(ctx context.Context, todoListName sql.NullString) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodosFromList, todoListName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.TodoName,
			&i.TodoListName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Content,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoContentById = `-- name: UpdateTodoContentById :one
UPDATE todo
SET content = $2
WHERE id = $1 RETURNING id, todo_name, todo_list_name, created_at, updated_at, content, done
`

type UpdateTodoContentByIdParams struct {
	ID      int32  `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateTodoContentById(ctx context.Context, arg UpdateTodoContentByIdParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoContentById, arg.ID, arg.Content)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.TodoName,
		&i.TodoListName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Content,
		&i.Done,
	)
	return i, err
}

const updateTodoListNameById = `-- name: UpdateTodoListNameById :one
UPDATE todo_list
SET todo_list_name = $2
WHERE id = $1 RETURNING id, todo_list_name, created_at, updated_at
`

type UpdateTodoListNameByIdParams struct {
	ID           int32          `json:"id"`
	TodoListName sql.NullString `json:"todo_list_name"`
}

func (q *Queries) UpdateTodoListNameById(ctx context.Context, arg UpdateTodoListNameByIdParams) (TodoList, error) {
	row := q.db.QueryRowContext(ctx, updateTodoListNameById, arg.ID, arg.TodoListName)
	var i TodoList
	err := row.Scan(
		&i.ID,
		&i.TodoListName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTodoNameById = `-- name: UpdateTodoNameById :one
UPDATE todo
SET todo_name = $2
WHERE id = $1 RETURNING id, todo_name, todo_list_name, created_at, updated_at, content, done
`

type UpdateTodoNameByIdParams struct {
	ID       int32          `json:"id"`
	TodoName sql.NullString `json:"todo_name"`
}

func (q *Queries) UpdateTodoNameById(ctx context.Context, arg UpdateTodoNameByIdParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoNameById, arg.ID, arg.TodoName)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.TodoName,
		&i.TodoListName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Content,
		&i.Done,
	)
	return i, err
}

const updateTodoStatusById = `-- name: UpdateTodoStatusById :one
UPDATE todo
SET done = $2
WHERE id = $1 RETURNING id, todo_name, todo_list_name, created_at, updated_at, content, done
`

type UpdateTodoStatusByIdParams struct {
	ID   int32 `json:"id"`
	Done bool  `json:"done"`
}

func (q *Queries) UpdateTodoStatusById(ctx context.Context, arg UpdateTodoStatusByIdParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoStatusById, arg.ID, arg.Done)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.TodoName,
		&i.TodoListName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Content,
		&i.Done,
	)
	return i, err
}
